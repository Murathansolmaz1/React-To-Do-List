{"version":3,"sources":["context/TodoContext.js","components/Todo.jsx","components/TodoList.jsx","App.js","context/reducer.js","index.js"],"names":["TodoLayerContext","createContext","TodoLayer","initialState","reducer","children","Provider","value","useReducer","useTodoLayerValue","useContext","Todo","todo","dispatch","useState","editable","setEditable","content","setContent","todoStyle","clsx","isCompleted","className","onClick","todoId","id","type","payload","onChange","e","target","newValue","updateTodo","TodoList","todos","map","App","inputRef","useRef","useEffect","current","focus","onSubmit","console","log","preventDefault","length","newTodo","Math","floor","random","event","ref","state","action","filter","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.cc3213ce.chunk.js","sourcesContent":["import React, { createContext, useContext, useReducer } from 'react';\r\n\r\nexport const TodoLayerContext = createContext();\r\n\r\nexport const TodoLayer = ({initialState, reducer, children}) => (\r\n    <TodoLayerContext.Provider value={ useReducer(reducer, initialState)}>\r\n        {children}\r\n        </TodoLayerContext.Provider>\r\n);\r\n\r\nexport const useTodoLayerValue = () => useContext(TodoLayerContext);","import React, { useState } from 'react'\r\nimport { GrFormClose, GrFormEdit, GrFormCheckmark } from \"react-icons/gr\"\r\nimport { useTodoLayerValue } from '../context/TodoContext'\r\nimport clsx from 'clsx';\r\n\r\nconst Todo = ({ todo }) => {\r\n\r\n    const [{ }, dispatch] = useTodoLayerValue()\r\n    const [editable, setEditable] = useState(false)\r\n    const [content, setContent] = useState(todo.content)\r\n\r\n    const removeTodo = todoId => {\r\n        dispatch({\r\n            type: 'REMOVE_TODO',\r\n            payload: todoId,\r\n        })\r\n    }\r\n\r\n\r\n    const completeTodo = todoId => {\r\n        dispatch({\r\n            type: 'COMPLETE_TODO',\r\n            payload: todoId,\r\n        })\r\n    }\r\n\r\n    const updateTodo = ({todoId, newValue}) => {\r\n        dispatch({\r\n            type: 'UPDATE_TODO',\r\n            payload: {\r\n                todoId,\r\n                newValue,\r\n            },\r\n        })\r\n    }\r\n\r\n    const todoStyle = clsx({\r\n        [\"todo-row\"]: true,\r\n        [\"completed\"]: todo.isCompleted,\r\n    });\r\n\r\n    return (\r\n        <div className={todoStyle}>\r\n            <div onClick={() => (editable ? \"\" : completeTodo(todo.id))}>\r\n                {\r\n                    editable ?\r\n                        <input type=\"text\" value={content} onChange={e => setContent(e.target.value)} className=\"todo-input-edit\" /> :\r\n                        todo.content\r\n\r\n                }\r\n\r\n            </div>\r\n\r\n            <div className=\"todo-icons\">\r\n                <GrFormClose className=\"todo-icon\" onClick={() => removeTodo(todo.id)} />\r\n                {editable ? (\r\n                    <GrFormCheckmark\r\n                        className=\"todo-icon\"\r\n                        onClick={() => {\r\n                            updateTodo({ todoId: todo.id, newValue: content });\r\n                            setEditable(false);\r\n                            setContent('');\r\n                        }}\r\n                    />\r\n                ) : (\r\n                    <GrFormEdit className=\"todo-icon\" onClick={() => setEditable(true)} />\r\n                )}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Todo\r\n","import React from 'react'\r\nimport Todo from './Todo'\r\n\r\nconst TodoList = ({ todos }) => {\r\n    return (\r\n        <div className = \"todo-list\">\r\n            {\r\n                todos && todos.map(todo =>\r\n                    <Todo key={todo.id} todo={todo} />\r\n                )\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TodoList\r\n","import './App.css';\nimport { useTodoLayerValue } from './context/TodoContext';\nimport TodoList from \"./components/TodoList\"\nimport React, { useState,useEffect, useRef } from 'react'\n\nconst App = () => {\n\n  const [{todos}, dispatch] = useTodoLayerValue();\n  const [content, setContent] = useState('');\n\n  const inputRef = useRef(null);\n\n  useEffect(() => {\n    inputRef.current.focus();\n  }, []);\n\n  const handleSubmit = (e) => {\n    console.log(content)\n    e.preventDefault();\n\n    if(!content && content.length < 1) return;\n\n    const newTodo = {\n      id: Math.floor(Math.random() * 12312312312),\n      content,\n      isCompleted: false,\n    };\n\n    dispatch({\n      type: 'ADD_TODO',\n      payload: newTodo,\n    });\n\n    setContent(' ')\n  }\n\n  return (\n    <div className = \"container\">\n      <form onSubmit = {handleSubmit} className = \"todo-form\">\n        <input type = \"text\" className = \"todo-input\" onChange = {((event)  => setContent(event.target.value))} value = {content} ref={inputRef}></input>\n        <button className = \"todo-button\">\n          ADD\n        </button>\n      </form>\n\n      {/* ToDoList Add Todo */}\n\n      <TodoList todos = {todos} />\n\n    </div>\n  )\n}\n\nexport default App\n\n","export const initialState = {\r\n    todos: [\r\n        {\r\n            id: 0,\r\n            content: \"Ä°lk To do\"\r\n        }\r\n    ]\r\n};\r\n\r\nconst reducer = (state, action) => {\r\n    console.log('action', action)\r\n\r\n    switch (action.type) {\r\n        case 'ADD_TODO':\r\n            return {\r\n                ...state,\r\n                todos: [action.payload, ...state.todos]\r\n            };\r\n        case 'REMOVE_TODO':\r\n            return {\r\n                ...state,\r\n                todos: [...state.todos].filter(todo => todo.id !== action.payload)\r\n            };\r\n            case 'COMPLETE_TODO':\r\n                return {\r\n                    ...state,\r\n                    todos: state.todos.map(todo => {\r\n                        if (todo.id !== action.payload) {\r\n                            return todo;\r\n                        }\r\n                        return {\r\n                            ...todo,\r\n                            isCompleted: !todo.isCompleted\r\n                        };\r\n                    })\r\n                };\r\n\r\n                case 'UPDATE_TODO':\r\n                    return {\r\n                        ...state,\r\n                        todos: state.todos.map(todo => {\r\n                            if (todo.id !== action.payload.todoId) {\r\n                                return todo;\r\n                            }\r\n                            return {\r\n                                ...todo,\r\n                                content: action.payload.newValue,\r\n                            };\r\n                        })\r\n                    };\r\n        default:\r\n            return {\r\n                ...state,\r\n            };\r\n    };\r\n\r\n}\r\n\r\nexport default reducer;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { TodoLayer } from \"./context/TodoContext\";\nimport reducer, {initialState} from './context/reducer';\n\nReactDOM.render(\n  <React.StrictMode>\n    <TodoLayer initialState = {initialState} reducer = {reducer}>\n    <App />\n    </TodoLayer>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}